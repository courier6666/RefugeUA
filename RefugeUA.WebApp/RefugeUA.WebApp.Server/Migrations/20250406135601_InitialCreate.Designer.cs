// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RefugeUA.DatabaseAccess;

#nullable disable

namespace RefugeUA.WebApp.Server.Migrations
{
    [DbContext(typeof(RefugeUADbContext))]
    [Migration("20250406135601_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccomodationAdvertisementImage", b =>
                {
                    b.Property<long>("AccomodationAdvertisementId")
                        .HasColumnType("bigint");

                    b.Property<long>("ImagesId")
                        .HasColumnType("bigint");

                    b.HasKey("AccomodationAdvertisementId", "ImagesId");

                    b.HasIndex("ImagesId");

                    b.ToTable("AccomodationImages", (string)null);
                });

            modelBuilder.Entity("AdvertisementAdvertisementGroup", b =>
                {
                    b.Property<long>("AdvertisementsId")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupsId")
                        .HasColumnType("bigint");

                    b.HasKey("AdvertisementsId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("AdvertisementToGroup", (string)null);
                });

            modelBuilder.Entity("AppUserVolunteerEvent", b =>
                {
                    b.Property<long>("OrganizedEventsId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizersId")
                        .HasColumnType("bigint");

                    b.HasKey("OrganizedEventsId", "OrganizersId");

                    b.HasIndex("OrganizersId");

                    b.ToTable("EventOrganizers", (string)null);
                });

            modelBuilder.Entity("AppUserVolunteerEvent1", b =>
                {
                    b.Property<long>("ParticipantsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ParticipatedEventsId")
                        .HasColumnType("bigint");

                    b.HasKey("ParticipantsId", "ParticipatedEventsId");

                    b.HasIndex("ParticipatedEventsId");

                    b.ToTable("EventParticipants", (string)null);
                });

            modelBuilder.Entity("AppUserVolunteerGroup", b =>
                {
                    b.Property<long>("FollowerVolunteerGroupsId")
                        .HasColumnType("bigint");

                    b.Property<long>("FollowersId")
                        .HasColumnType("bigint");

                    b.HasKey("FollowerVolunteerGroupsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("VolunteerGroupFollowers", (string)null);
                });

            modelBuilder.Entity("AppUserVolunteerGroup1", b =>
                {
                    b.Property<long>("AdminVolunteerGroupsId")
                        .HasColumnType("bigint");

                    b.Property<long>("AdminsId")
                        .HasColumnType("bigint");

                    b.HasKey("AdminVolunteerGroupsId", "AdminsId");

                    b.HasIndex("AdminsId");

                    b.ToTable("VolunteerGroupAdmins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RefugeUA.DatabaseAccess.Identity.AppUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RefugeUA.Entities.Abstracts.Advertisement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContactInformationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NonAcceptenceReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("AuthorId");

                    b.HasIndex("ContactInformationId")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Advertisement");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("RefugeUA.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nchar(5)")
                        .IsFixedLength();

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Settlement")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("RefugeUA.Entities.AdvertisementGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AdvertisementGroups");
                });

            modelBuilder.Entity("RefugeUA.Entities.AdvertisementResponse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AdvertId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContactInformationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("ContactInformationId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("AdvertisementResponses");
                });

            modelBuilder.Entity("RefugeUA.Entities.ContactInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Telegram")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Viber")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("ContactInformation");
                });

            modelBuilder.Entity("RefugeUA.Entities.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("RefugeUA.Entities.MentalSupportArticle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("MentalSupportArticles");
                });

            modelBuilder.Entity("RefugeUA.Entities.PsychologistInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ContactId")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("PsychologistInformation");
                });

            modelBuilder.Entity("RefugeUA.Entities.VolunteerEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AddressId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OnlineConferenceLink")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("VolunteerGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("VolunteerGroupId");

                    b.ToTable("VolunteerEvents");
                });

            modelBuilder.Entity("RefugeUA.Entities.VolunteerEventScheduleItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<long>("VolunteerEventId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerEventId");

                    b.ToTable("VolunteerEventScheduleItems");
                });

            modelBuilder.Entity("RefugeUA.Entities.VolunteerGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionContent")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("VolunteerGroups");
                });

            modelBuilder.Entity("RefugeUA.Entities.AccomodationAdvertisement", b =>
                {
                    b.HasBaseType("RefugeUA.Entities.Abstracts.Advertisement");

                    b.Property<float?>("AreaSqMeters")
                        .HasColumnType("real");

                    b.Property<string>("BuildingType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("Floors")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<bool>("PetsAllowed")
                        .HasColumnType("bit");

                    b.ToTable("AccomodationAdvertisements");
                });

            modelBuilder.Entity("RefugeUA.Entities.EducationAdvertisement", b =>
                {
                    b.HasBaseType("RefugeUA.Entities.Abstracts.Advertisement");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EducationType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TargetGroup")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable("EducationAdvertisements");
                });

            modelBuilder.Entity("RefugeUA.Entities.WorkAdvertisement", b =>
                {
                    b.HasBaseType("RefugeUA.Entities.Abstracts.Advertisement");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("JobPosition")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RequirementsContent")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<decimal?>("SalaryLower")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SalaryUpper")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("WorkAdvertisements");
                });

            modelBuilder.Entity("AccomodationAdvertisementImage", b =>
                {
                    b.HasOne("RefugeUA.Entities.AccomodationAdvertisement", null)
                        .WithMany()
                        .HasForeignKey("AccomodationAdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RefugeUA.Entities.Image", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvertisementAdvertisementGroup", b =>
                {
                    b.HasOne("RefugeUA.Entities.Abstracts.Advertisement", null)
                        .WithMany()
                        .HasForeignKey("AdvertisementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RefugeUA.Entities.AdvertisementGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppUserVolunteerEvent", b =>
                {
                    b.HasOne("RefugeUA.Entities.VolunteerEvent", null)
                        .WithMany()
                        .HasForeignKey("OrganizedEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RefugeUA.DatabaseAccess.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("OrganizersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppUserVolunteerEvent1", b =>
                {
                    b.HasOne("RefugeUA.DatabaseAccess.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RefugeUA.Entities.VolunteerEvent", null)
                        .WithMany()
                        .HasForeignKey("ParticipatedEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppUserVolunteerGroup", b =>
                {
                    b.HasOne("RefugeUA.Entities.VolunteerGroup", null)
                        .WithMany()
                        .HasForeignKey("FollowerVolunteerGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RefugeUA.DatabaseAccess.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppUserVolunteerGroup1", b =>
                {
                    b.HasOne("RefugeUA.Entities.VolunteerGroup", null)
                        .WithMany()
                        .HasForeignKey("AdminVolunteerGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RefugeUA.DatabaseAccess.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("AdminsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("RefugeUA.DatabaseAccess.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("RefugeUA.DatabaseAccess.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RefugeUA.DatabaseAccess.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("RefugeUA.DatabaseAccess.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RefugeUA.Entities.Abstracts.Advertisement", b =>
                {
                    b.HasOne("RefugeUA.Entities.Address", "Address")
                        .WithOne("Advertisement")
                        .HasForeignKey("RefugeUA.Entities.Abstracts.Advertisement", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RefugeUA.DatabaseAccess.Identity.AppUser", "Author")
                        .WithMany("Advertisements")
                        .HasForeignKey("AuthorId");

                    b.HasOne("RefugeUA.Entities.ContactInformation", "ContactInformation")
                        .WithOne("Advertisement")
                        .HasForeignKey("RefugeUA.Entities.Abstracts.Advertisement", "ContactInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Author");

                    b.Navigation("ContactInformation");
                });

            modelBuilder.Entity("RefugeUA.Entities.AdvertisementResponse", b =>
                {
                    b.HasOne("RefugeUA.Entities.Abstracts.Advertisement", "Advertisement")
                        .WithMany("Responses")
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RefugeUA.Entities.ContactInformation", "ContactInformation")
                        .WithOne("AdvertisementResponse")
                        .HasForeignKey("RefugeUA.Entities.AdvertisementResponse", "ContactInformationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RefugeUA.DatabaseAccess.Identity.AppUser", "User")
                        .WithMany("AdvertisementResponses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertisement");

                    b.Navigation("ContactInformation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RefugeUA.Entities.MentalSupportArticle", b =>
                {
                    b.HasOne("RefugeUA.DatabaseAccess.Identity.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("RefugeUA.Entities.PsychologistInformation", b =>
                {
                    b.HasOne("RefugeUA.DatabaseAccess.Identity.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("RefugeUA.Entities.ContactInformation", "Contact")
                        .WithOne("PsychologistInformation")
                        .HasForeignKey("RefugeUA.Entities.PsychologistInformation", "ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("RefugeUA.Entities.VolunteerEvent", b =>
                {
                    b.HasOne("RefugeUA.Entities.Address", "Address")
                        .WithOne("VolunteerEvent")
                        .HasForeignKey("RefugeUA.Entities.VolunteerEvent", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RefugeUA.Entities.VolunteerGroup", "VolunteerGroup")
                        .WithMany("VolunteerEvents")
                        .HasForeignKey("VolunteerGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Address");

                    b.Navigation("VolunteerGroup");
                });

            modelBuilder.Entity("RefugeUA.Entities.VolunteerEventScheduleItem", b =>
                {
                    b.HasOne("RefugeUA.Entities.VolunteerEvent", "VolunteerEvent")
                        .WithMany("ScheduleItems")
                        .HasForeignKey("VolunteerEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VolunteerEvent");
                });

            modelBuilder.Entity("RefugeUA.Entities.AccomodationAdvertisement", b =>
                {
                    b.HasOne("RefugeUA.Entities.Abstracts.Advertisement", null)
                        .WithOne()
                        .HasForeignKey("RefugeUA.Entities.AccomodationAdvertisement", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RefugeUA.Entities.EducationAdvertisement", b =>
                {
                    b.HasOne("RefugeUA.Entities.Abstracts.Advertisement", null)
                        .WithOne()
                        .HasForeignKey("RefugeUA.Entities.EducationAdvertisement", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RefugeUA.Entities.WorkAdvertisement", b =>
                {
                    b.HasOne("RefugeUA.Entities.Abstracts.Advertisement", null)
                        .WithOne()
                        .HasForeignKey("RefugeUA.Entities.WorkAdvertisement", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RefugeUA.DatabaseAccess.Identity.AppUser", b =>
                {
                    b.Navigation("AdvertisementResponses");

                    b.Navigation("Advertisements");
                });

            modelBuilder.Entity("RefugeUA.Entities.Abstracts.Advertisement", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("RefugeUA.Entities.Address", b =>
                {
                    b.Navigation("Advertisement");

                    b.Navigation("VolunteerEvent");
                });

            modelBuilder.Entity("RefugeUA.Entities.ContactInformation", b =>
                {
                    b.Navigation("Advertisement");

                    b.Navigation("AdvertisementResponse");

                    b.Navigation("PsychologistInformation");
                });

            modelBuilder.Entity("RefugeUA.Entities.VolunteerEvent", b =>
                {
                    b.Navigation("ScheduleItems");
                });

            modelBuilder.Entity("RefugeUA.Entities.VolunteerGroup", b =>
                {
                    b.Navigation("VolunteerEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
